#ifndef _MYGAME_DEBUGSTRING_H
#define _MYGAME_DEBUGSTRING_H
//-----------------------------------------------------------------------------------
//
//	文字系列のクラス
//
//-----------------------------------------------------------------------------------
#ifndef NanairoLib_DXDX_H
#include <DirectNeed.h>
#endif

#ifndef _VECTOR_
#include <vector>
#endif

#ifndef _STRING_
#include <string>
#endif

#ifndef _FSTREAM_
#include <fstream>
#endif

namespace NanairoLib
{
	//--------------------------------------
	//出力ログを表示するときに使う関数クラス
	//--------------------------------------
	class OutPutStringFunction
	{
	public:
		__IMPOETER OutPutStringFunction(){}
		__IMPOETER ~OutPutStringFunction(){}
			
	public:
		//--------------------------------------------
		//「同じファイル」ということを示すログメソッド
		//--------------------------------------------
		//@in : ファイル名
		__IMPOETER void SameOut_outputString(LPCTSTR name);

		//--------------------------------------------
		//「読み込み成功」ということを示すログメソッド
		//--------------------------------------------
		//@in : ファイル名、新しい名前
		__IMPOETER void Success_outputString(LPCTSTR pass,LPCTSTR name);
			
		//--------------------------------------------
		//「読み込み失敗」ということを示すログメソッド
		//--------------------------------------------
		//@in : ファイル名
		__IMPOETER void Failed_outputString(LPCTSTR pass);

		//--------------------------------------------
		//ログをもらって表示
		//--------------------------------------------
		//@in : ログリスト
		__IMPOETER void FreedomString( std::vector<std::string>& word );
	};

	//------------------------------------------
	//文字列で必要になったものを関数にしたクラス
	//------------------------------------------
	class StringFunction
	{
	public:
		__IMPOETER StringFunction(){}
		__IMPOETER ~StringFunction(){}

		//---------------------------------------------------------------------------------
		//文字列を空白文字で分割して返すメソッド
		//---------------------------------------------------------------------------------
		//@in : 分割したい文字列
		//@out : 分割した文字列群
		//@cnt : 回数制限
		__IMPOETER void Split(std::string& in, std::vector<std::string>& out, int cnt = 0);

		//---------------------------------------------------------------------------------
		//文字列を空白文字で分割して返すメソッド
		//---------------------------------------------------------------------------------
		//@in : 分割したい文字列
		//@in : 分割キーワード
		//@out : 分割した文字列群
		//@cnt : 回数制限
		__IMPOETER void Split(std::string& in, LPCSTR keyword,std::vector<std::string>& out, int cnt = 0);
		
		//----------------------------------------------------
		//前の空白文字を削除して詰める
		//----------------------------------------------------
		//@inout : 変換文字列
		__IMPOETER void FirstSpaceErase(std::string& str);

		//------------------------------------------------------------------------------------------------------
		//デフォルトなパスを前方へ装備して返す
		//------------------------------------------------------------------------------------------------------
		//@out : 出来上がった文字列
		//@in : 変換元文字列
		//@in : 間に挟む文字列
		//@in : 入れ込む文字列
		__IMPOETER void GetDefaultPass(std::string& out, std::string& pass, LPCSTR dotpass, LPCSTR divword);
		
		//-------------------------------------------------------------------------
		//文字列から同じ文字があるか、あればその位置を返す
		//-------------------------------------------------------------------------
		//@in : 対象文字列
		//@in : 探す文字列
		//@out : 文字列の位置
		__IMPOETER int IsSameString(std::string& str, std::string& sameString);

	};

	//------------------------------------------
	//読み込みで必要なスーパークラス
	//------------------------------------------
	class Loader
	{
	public:
		//-----------------------------
		//デフォルトパス
		//-----------------------------
		std::string defPass;

		//------------------------------
		//デコン
		//------------------------------
		__IMPOETER Loader(){}
		__IMPOETER virtual ~Loader(){}
			
	protected:
		//------------------------------------------------------------------------------------------------------------
		//ファイルを開く簡単操作
		//------------------------------------------------------------------------------------------------------------
		//@inout : ファイルローダークラス
		//@in : ファイルパス
		//@in : true(入力) false(出力)
		//@in : true(バイナリ) false(テキスト)
		//@out : true(成功) false(失敗)
		__IMPOETER bool Open_the_file(std::fstream& fs,std::string& filePass,bool isIn = false, bool isBinary = false);
			
		//-------------------------------------------------
		//ファイルを閉じる簡単操作
		//-------------------------------------------------
		//@inout : ファイルローダークラス
		__IMPOETER void Close_the_file(std::fstream& fs);
	};
}

#endif