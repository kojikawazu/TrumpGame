#ifndef NanairoLib_FUNC_PLUS_H
#define NanairoLib_FUNC_PLUS_H

#ifndef NanairoLib_FUNC_H
#include <DirectFunction.h>
#endif

#ifndef MYDIRECTX_LIGHTCOLOR_H
#include <DirectLight.h>
#endif

//-----------------------------------------
//割り当て型関数クラスをここに記載
//必要な関数を増やしたり使いたい時はここのクラスを使うっ
//※データ保持が必要な場合はこのクラスには入れることはできません＞＜
//-----------------------------------------
namespace NanairoLib
{
	//------------------------------------------------------------------
	//DirectXで使用されるメソッドをここに
	//------------------------------------------------------------------
	class Direct3DFunc
	{
	private:
		//----------------------------------------------------------
		//コピーガード（大体使わないので）
		//----------------------------------------------------------
		__IMPOETER			 Direct3DFunc(const Direct3DFunc& func);
	
	public:		
		//----------------------------------------------------------
		//ﾃﾞｺﾝ系
		//----------------------------------------------------------
		__IMPOETER			 Direct3DFunc();
		__IMPOETER			 ~Direct3DFunc();
	
	public:		
		//----------------------------------------------------------
		//３D用ビューパイプライン等の値変更
		//----------------------------------------------------------

		//initDirect3D.cpp

		//---------------------------------------------------------------
		//デフォルトプロジェクション行列設定
		//---------------------------------------------------------------
		//@in : DirectX用デバイス
		//@out : プロジェクション行列
		__IMPOETER	D3DXMATRIX SetDefaultProjParam(PDirectDevice Device);
		
		//--------------------------------------------------------
		//ビューポート行列取得
		//--------------------------------------------------------
		//@in : DirectX用デバイス
		//@out : ビューポート行列
		__IMPOETER	D3DXMATRIX SetViewPort(PDirectDevice Device);

		//----------------------------------------------------------------------------------------------------------------------
		//プロジェクション設定
		//----------------------------------------------------------------------------------------------------------------------
		//@in : DirectX用デバイス
		//@in : 画角
		//@in : アスペクト比
		//@in : 前方クリッピング幅
		//@in : 後方クリッピング幅
		//@out : プロジェクション行列
		__IMPOETER	D3DXMATRIX SetProjectionParam(PDirectDevice Device,float dangle,float camera_frontDis,float camera_backDis);
		
		//----------------------------------------------------------------
		//ライト設定
		//----------------------------------------------------------------
		//@in : DirectX用デバイス
		//@in : ライトクラス
		__IMPOETER	void SetLightParam(PDirectDevice Device,Light* light);
		
		//---------------------------------------------------------------------------------------------------------------------
		//ビュー設定
		//---------------------------------------------------------------------------------------------------------------------
		//@in : DirectX用デバイス
		//@in : 視点ベクトル
		//@in : 注視点ベクトル
		//@in : 上方向ベクトル
		//@in : true(ビュー設定あり) false(ビュー設定なし)
		//@out : ビュー行列
		__IMPOETER D3DXMATRIX SetCamera(PDirectDevice Device,RVector3 eye,RVector3 at,RVector3 up,bool isTransfrom = false);
		
		//-----------------------------------------------------------------------------------------------------------------------------------
		//ワールド変換
		//-----------------------------------------------------------------------------------------------------------------------------------
		//@in : DirectX用デバイス
		//@in : 位置ベクトル
		//@in : 回転ベクトル
		//@in : 拡縮ベクトル
		//@in : 0(変換付き) それ以外(変換なし)
		//@in : 0(回転変換あり) それ以外(回転変換なし)
		//@out : ワールド行列
		__IMPOETER D3DXMATRIX SetWorldPos(PDirectDevice Device,RCVector3 pos,RCVector3 rota,RCVector3 scale,int mode = 0,int anglemode = 0);
		
		//-----------------------------------------------------------------------------------------------------------------------------------
		//ワールド変換（設定用）
		//-----------------------------------------------------------------------------------------------------------------------------------
		//@in : DirectX用デバイス
		//@in : ワールド行列
		//@out : ワールド行列
		__IMPOETER D3DXMATRIX SetWorldPos(PDirectDevice Device,PCMATRIX world);

		//-----------------------------------------------------------------------------------------------------------------
		//ワールドクォータニオン変換
		//-----------------------------------------------------------------------------------------------------------------
		//@in : DirectX用デバイス
		//@in : 位置ベクトル
		//@in : 任意軸ベクトル
		//@in : 回転角度
		//@in : 拡縮ベクトル
		//@out : ワールド行列
		__IMPOETER D3DXMATRIX SetWorldQuat(PDirectDevice Device,RCVector3 pos,RCVector3 rotavec,float ang,RCVector3 scale);
		
		//-----------------------------------------------------------------------------------------------------------------
		//ワールド座標からスクリーン座標に変換
		//-----------------------------------------------------------------------------------------------------------------
		//@in : DirectX用デバイス
		//@in : ローカル座標
		//@in : ワールド行列
		//@in : ビュー行列
		//@in : プロジェクション行列
		//@in : ビューポート行列
		//@out : スクリーン座標
		__IMPOETER D3DXVECTOR3 ChanGetoScreen_world(PDirectDevice Device, RCVector3 pos, PCMATRIX wo, PCMATRIX vi, PCMATRIX pr, PCMATRIX vp);

		//-----------------------------------------------------------------------------------------------------------------
		//スクリーン座標からワールド座標に変換
		//-----------------------------------------------------------------------------------------------------------------
		//@in : DirectX用デバイス
		//@in : スクリーン座標
		//@in : ビュー行列
		//@in : プロジェクション行列
		//@in : ビューポート行列
		//@out : ワールド座標
		__IMPOETER D3DXVECTOR3 ChanGetoWorld_screen(PDirectDevice Device, RCVector3 pos, PCMATRIX vi, PCMATRIX pr, PCMATRIX vp);
	};

}
#endif